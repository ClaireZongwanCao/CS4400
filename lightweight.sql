-- LOGIN
SELECT * FROM USER WHERE USERNAME = 'faculty1' AND PASSWORD = 'facultypass1'

-- CREATE PROFILE
UPDATE REGULARUSER SET NAME =  'John Smith',
DATE_OF_BIRTH = '1956-01-01', GENDER = 'M', EMAIL = 'monica1@gatech.edu',
IS_FACULTY = 1, ADDRESS = 'Georgia Tech', DEPT = 'COC'
WHERE USERNAME = 'faculty2';

-- SEARCH BOOK
-- If there are available books
SELECT BOOK.ISBN, PUBLISHER, TITLE, EDITION, AUTHORS FROM BOOK INNER JOIN BOOK_COPY ON BOOK.ISBN = BOOK_COPY.ISBN INNER JOIN AUTHORS ON AUTHORS.ISBN = BOOK.ISBN
WHERE BOOK.ISBN LIKE '%013%' OR PUBLISHER LIKE '%Smith%' OR AUTHORS LIKE '%Steve%'
OR EDITION = '2' AND IS_ON_HOLD = FALSE AND IS_DAMAGED = FALSE
GROUP BY BOOK.ISBN;

-- If there is no available book
SELECT BOOK_COPY.COPY_NUM, MAX(RETURN_DATE) as latest_date FROM BOOK_COPY INNER JOIN ISSUES 
ON BOOK_COPY.ISBN = ISSUES.ISBN AND BOOK_COPY.COPY_NUM = ISSUES.COPY_NUM
WHERE BOOK_COPY.ISBN = '0132368684' AND IS_CHECKED_OUT = TRUE AND FUTURE_REQUESTER IS NULL
GROUP BY COPY_NUM
ORDER BY latest_date
LIMIT 1;

 -- HOLD REQUEST
UPDATE BOOK_COPY INNER JOIN BOOK ON BOOK_COPY.ISBN = BOOK.ISBN SET IS_ON_HOLD = TRUE
WHERE BOOK.ISBN = '0132368684' AND IS_CHECKED_OUT = FALSE AND IS_BOOK_ON_RESERVE = FALSE
AND EXISTS (
	SELECT * FROM REGULARUSER
	WHERE IS_DEBARRED = FALSE AND USERNAME = 'student11'
)

INSERT INTO ISSUES VALUES (
	(SELECT a.* FROM (SELECT max(ISSUES_ID) + 1 from ISSUES) a), 
	'student11', '0132368684', '1', curdate(), curdate(), date_add(curdate(),interval 17 day), '0');


-- REQUEST EXTENSION
-- If user is student
SELECT DATE_OF_ISSUES, EXTENSION_DATE, RETURN_DATE, COUNT_OF_EXTENSIONS FROM ISSUES
WHERE ISSUES_ID = '25' AND COUNT_OF_EXTENSIONS < 3
-- If user is faculty
SELECT DATE_OF_ISSUES, EXTENSION_DATE, RETURN_DATE, COUNT_OF_EXTENSIONS FROM ISSUES
WHERE ISSUES_ID = '26' AND COUNT_OF_EXTENSIONS < 6

UPDATE ISSUES INNER JOIN BOOK_COPY ON ISSUES.ISBN = BOOK_COPY.ISBN AND ISSUES.COPY_NUM = BOOK_COPY.COPY_NUM
set EXTENSION_DATE = curdate(),
RETURN_DATE = date_add(curdate(),interval 14 day),
COUNT_OF_EXTENSIONS = (SELECT a.* FROM (SELECT COUNT_OF_EXTENSIONS + 1 FROM ISSUES
WHERE ISSUES_ID = '25') a)
WHERE ISSUES_ID = '25' AND FUTURE_REQUESTER IS NULL;

SELECT EXTENSION_DATE, RETURN_DATE, COUNT_OF_EXTENSIONS FROM ISSUES
WHERE ISSUES_ID = '25'

-- FUTURE REQUEST
SELECT BOOK_COPY.COPY_NUM, MAX(RETURN_DATE) as latest_date FROM BOOK_COPY INNER JOIN ISSUES 
ON BOOK_COPY.ISBN = ISSUES.ISBN AND BOOK_COPY.COPY_NUM = ISSUES.COPY_NUM
WHERE BOOK_COPY.ISBN = '0132368684' AND IS_CHECKED_OUT = TRUE AND FUTURE_REQUESTER IS NULL
GROUP BY COPY_NUM
ORDER BY latest_date
LIMIT 1;

UPDATE BOOK_COPY INNER JOIN ISSUES ON BOOK_COPY.ISBN = ISSUES.ISBN AND BOOK_COPY.COPY_NUM = ISSUES.COPY_NUM
SET FUTURE_REQUESTER = 'student11' WHERE BOOK_COPY.ISBN = '0132368684' AND (BOOK_COPY.COPY_NUM, RETURN_DATE) IN
(SELECT COPY_NUM, MIN(latest_date) FROM 
(
	SELECT b.COPY_NUM, MAX(RETURN_DATE) as latest_date FROM 
	(SELECT * from BOOK_COPY) b
	INNER JOIN ISSUES 
	ON b.ISBN = ISSUES.ISBN AND b.COPY_NUM = ISSUES.COPY_NUM
	WHERE b.ISBN = '0132368684' AND IS_CHECKED_OUT = TRUE AND FUTURE_REQUESTER IS NULL
	GROUP BY b.COPY_NUM
) a
);

-- LOCATE
SELECT FLOOR_NUM, BOOK.SHELF_NUM, AISLE_NUM, SUBJECT_NAME 
FROM BOOK INNER JOIN SHELF ON BOOK.SHELF_NUM = SHELF.SHELF_NUM 
WHERE ISBN = '0132368684';

-- CHECKOUT
UPDATE BOOK_COPY 
SET IS_ON_HOLD = 0
WHERE BOOK_COPY.ISBN = '0132368684' AND BOOK_COPY.COPY_NUM = '1'
AND date_sub(curdate(),interval 3 day) > (SELECT a.* FROM (SELECT max(DATE_OF_ISSUES) FROM ISSUES NATURAL JOIN BOOK_COPY WHERE BOOK_COPY.ISBN = '0132368684' AND BOOK_COPY.COPY_NUM = '1') a);

UPDATE BOOK_COPY 
SET IS_CHECKED_OUT = 1, IS_ON_HOLD = 0
WHERE BOOK_COPY.ISBN = '0132368684' AND BOOK_COPY.COPY_NUM = '1'
AND date_sub(curdate(),interval 3 day) < (SELECT a.* FROM (SELECT max(DATE_OF_ISSUES) FROM ISSUES NATURAL JOIN BOOK_COPY WHERE BOOK_COPY.ISBN = '0132368684' AND BOOK_COPY.COPY_NUM = '1') a);

SELECT DISTINCT ISBN, COPY_NUM, USERNAME, curdate(), date_add(curdate(),interval 14 day) FROM ISSUES WHERE ISBN = '0132368684' AND COPY_NUM = '1';

UPDATE ISSUES 
SET RETURN_DATE = date_add(curdate(),interval 14 day)
WHERE ISSUES.ISBN = '0132368684' AND ISSUES.COPY_NUM = '1'
AND date_sub(curdate(),interval 3 day) < (SELECT a.* FROM (SELECT max(DATE_OF_ISSUES) FROM ISSUES NATURAL JOIN BOOK_COPY WHERE BOOK_COPY.ISBN = '0132368684' AND BOOK_COPY.COPY_NUM = '1') a);

-- RETURN 
UPDATE BOOK_COPY SET IS_CHECKED_OUT = FALSE WHERE ISBN = '0132368684' AND COPY_NUM = '1';

-- RETURN PENALTY
UPDATE REGULARUSER
SET PENALTY = (SELECT a.* FROM (SELECT PENALTY + 0.5 * datediff(curdate(), MAX(RETURN_DATE)) from REGULARUSER INNER JOIN ISSUES ON REGULARUSER.USERNAME = ISSUES.USERNAME WHERE ISBN = '0132368684' AND COPY_NUM = '1') a)
WHERE USERNAME = (SELECT a.USERNAME FROM (SELECT REGULARUSER.USERNAME, MAX(RETURN_DATE) from REGULARUSER INNER JOIN ISSUES ON REGULARUSER.USERNAME = ISSUES.USERNAME WHERE ISBN = '0132368684' AND COPY_NUM = '1') a);

UPDATE REGULARUSER
SET IS_DEBARRED = 1
WHERE PENALTY >= 100 
AND USERNAME = (SELECT a.USERNAME FROM (SELECT REGULARUSER.USERNAME, MAX(RETURN_DATE) from REGULARUSER INNER JOIN ISSUES ON REGULARUSER.USERNAME = ISSUES.USERNAME WHERE ISBN = '0132368684' AND COPY_NUM = '1') a);

-- DAMAGE SUBMIT
UPDATE BOOK_COPY SET IS_DAMAGED = TRUE, IS_CHECKED_OUT = FALSE
WHERE ISBN = '0132368684' AND COPY_NUM = '1';

UPDATE REGULARUSER
SET PENALTY = PENALTY + (SELECT a.* FROM (SELECT DISTINCT 0.5 * BOOK.COST from REGULARUSER INNER JOIN ISSUES ON REGULARUSER.USERNAME = ISSUES.USERNAME INNER JOIN BOOK ON ISSUES.ISBN = BOOK.ISBN WHERE ISSUES.ISBN = '0132368684' AND COPY_NUM = '1') a)
WHERE USERNAME = (SELECT a.USERNAME FROM (SELECT REGULARUSER.USERNAME, MAX(RETURN_DATE) from REGULARUSER INNER JOIN ISSUES ON REGULARUSER.USERNAME = ISSUES.USERNAME WHERE ISBN = '0132368684' AND COPY_NUM = '1') a);

UPDATE REGULARUSER
SET IS_DEBARRED = 1
WHERE PENALTY >= 100 
AND USERNAME = (SELECT a.USERNAME FROM (SELECT REGULARUSER.USERNAME, MAX(RETURN_DATE) from REGULARUSER INNER JOIN ISSUES ON REGULARUSER.USERNAME = ISSUES.USERNAME WHERE ISBN = '0132368684' AND COPY_NUM = '1') a);

-- DAMAGE REPORT
SELECT MONTH(RETURN_DATE), SUBJECT_NAME, COUNT(*) FROM BOOK INNER JOIN BOOK_COPY ON BOOK.ISBN = BOOK_COPY.ISBN 
INNER JOIN ISSUES ON ISSUES.ISBN = BOOK_COPY.ISBN AND ISSUES.COPY_NUM = BOOK_COPY.COPY_NUM
WHERE MONTH(RETURN_DATE) = 4 AND 
(SUBJECT_NAME = 'Art' OR SUBJECT_NAME = 'History' OR SUBJECT_NAME = 'Science')
AND IS_DAMAGED = TRUE
GROUP BY SUBJECT_NAME;

-- POPULAR BOOK
(SELECT MONTH(DATE_OF_ISSUES), TITLE, COUNT(*) AS count
FROM BOOK INNER JOIN ISSUES ON BOOK.ISBN = ISSUES.ISBN 
WHERE MONTH(DATE_OF_ISSUES) = 1
GROUP BY TITLE 
ORDER BY count
LIMIT 3)
UNION 
(SELECT MONTH(DATE_OF_ISSUES), TITLE, COUNT(*) AS count
FROM BOOK INNER JOIN ISSUES ON BOOK.ISBN = ISSUES.ISBN 
WHERE MONTH(DATE_OF_ISSUES) = 2
GROUP BY TITLE 
ORDER BY count
LIMIT 3)

-- FREQUENT USER
(SELECT MONTH(DATE_OF_ISSUES), REGULARUSER.USERNAME, COUNT(*) AS count
FROM REGULARUSER INNER JOIN ISSUES ON ISSUES.USERNAME = REGULARUSER.USERNAME 
WHERE MONTH(DATE_OF_ISSUES) = 1
GROUP BY REGULARUSER.USERNAME
HAVING count > 10 
ORDER BY count
LIMIT 5)
UNION 
(SELECT MONTH(DATE_OF_ISSUES), REGULARUSER.USERNAME, COUNT(*) AS count
FROM REGULARUSER INNER JOIN ISSUES ON ISSUES.USERNAME = REGULARUSER.USERNAME
WHERE MONTH(DATE_OF_ISSUES) = 2 
GROUP BY REGULARUSER.USERNAME 
HAVING count > 10
ORDER BY count
LIMIT 5)

-- FREQUENT SUBJECT
(SELECT MONTH(DATE_OF_ISSUES), SUBJECT_NAME, COUNT(*) AS count
FROM BOOK INNER JOIN ISSUES ON BOOK.ISBN = ISSUES.ISBN 
WHERE MONTH(DATE_OF_ISSUES) = MONTH(curdate()) - 1
GROUP BY SUBJECT_NAME 
ORDER BY count
LIMIT 3)
UNION 
(SELECT MONTH(DATE_OF_ISSUES), SUBJECT_NAME, COUNT(*) AS count
FROM BOOK INNER JOIN ISSUES ON BOOK.ISBN = ISSUES.ISBN 
WHERE MONTH(DATE_OF_ISSUES) = MONTH(curdate())
GROUP BY SUBJECT_NAME 
ORDER BY count
LIMIT 3)



